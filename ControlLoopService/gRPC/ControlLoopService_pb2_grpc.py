# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import ControlLoopService_pb2 as ControlLoopService__pb2
import sila2lib.framework.SiLAFramework_pb2 as SiLAFramework__pb2


class ControlLoopServiceStub(object):
    """Feature: Control Loop Service
    Allows to control a Qmix Device with a Control Loop
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WriteSetPoint = channel.unary_unary(
                '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/WriteSetPoint',
                request_serializer=ControlLoopService__pb2.WriteSetPoint_Parameters.SerializeToString,
                response_deserializer=ControlLoopService__pb2.WriteSetPoint_Responses.FromString,
                )
        self.RunControlLoop = channel.unary_unary(
                '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/RunControlLoop',
                request_serializer=ControlLoopService__pb2.RunControlLoop_Parameters.SerializeToString,
                response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
                )
        self.RunControlLoop_Info = channel.unary_stream(
                '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/RunControlLoop_Info',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
                )
        self.RunControlLoop_Result = channel.unary_unary(
                '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/RunControlLoop_Result',
                request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
                response_deserializer=ControlLoopService__pb2.RunControlLoop_Responses.FromString,
                )
        self.StopControlLoop = channel.unary_unary(
                '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/StopControlLoop',
                request_serializer=ControlLoopService__pb2.StopControlLoop_Parameters.SerializeToString,
                response_deserializer=ControlLoopService__pb2.StopControlLoop_Responses.FromString,
                )
        self.Subscribe_ControllerValue = channel.unary_stream(
                '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/Subscribe_ControllerValue',
                request_serializer=ControlLoopService__pb2.Subscribe_ControllerValue_Parameters.SerializeToString,
                response_deserializer=ControlLoopService__pb2.Subscribe_ControllerValue_Responses.FromString,
                )
        self.Subscribe_SetPointValue = channel.unary_stream(
                '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/Subscribe_SetPointValue',
                request_serializer=ControlLoopService__pb2.Subscribe_SetPointValue_Parameters.SerializeToString,
                response_deserializer=ControlLoopService__pb2.Subscribe_SetPointValue_Responses.FromString,
                )


class ControlLoopServiceServicer(object):
    """Feature: Control Loop Service
    Allows to control a Qmix Device with a Control Loop
    """

    def WriteSetPoint(self, request, context):
        """Write Set Point
        Write a Set Point value to the Controller Device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunControlLoop(self, request, context):
        """Run Control Loop
        Run the Control Loop
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunControlLoop_Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunControlLoop_Result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopControlLoop(self, request, context):
        """Stop Control Loop
        Stops the Control Loop (has no effect, if no Loop is currently running)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_ControllerValue(self, request, context):
        """Controller Value
        The actual value from the Device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_SetPointValue(self, request, context):
        """Set Point Value
        The current SetPoint value of the Device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControlLoopServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WriteSetPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteSetPoint,
                    request_deserializer=ControlLoopService__pb2.WriteSetPoint_Parameters.FromString,
                    response_serializer=ControlLoopService__pb2.WriteSetPoint_Responses.SerializeToString,
            ),
            'RunControlLoop': grpc.unary_unary_rpc_method_handler(
                    servicer.RunControlLoop,
                    request_deserializer=ControlLoopService__pb2.RunControlLoop_Parameters.FromString,
                    response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
            ),
            'RunControlLoop_Info': grpc.unary_stream_rpc_method_handler(
                    servicer.RunControlLoop_Info,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
            ),
            'RunControlLoop_Result': grpc.unary_unary_rpc_method_handler(
                    servicer.RunControlLoop_Result,
                    request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
                    response_serializer=ControlLoopService__pb2.RunControlLoop_Responses.SerializeToString,
            ),
            'StopControlLoop': grpc.unary_unary_rpc_method_handler(
                    servicer.StopControlLoop,
                    request_deserializer=ControlLoopService__pb2.StopControlLoop_Parameters.FromString,
                    response_serializer=ControlLoopService__pb2.StopControlLoop_Responses.SerializeToString,
            ),
            'Subscribe_ControllerValue': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_ControllerValue,
                    request_deserializer=ControlLoopService__pb2.Subscribe_ControllerValue_Parameters.FromString,
                    response_serializer=ControlLoopService__pb2.Subscribe_ControllerValue_Responses.SerializeToString,
            ),
            'Subscribe_SetPointValue': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_SetPointValue,
                    request_deserializer=ControlLoopService__pb2.Subscribe_SetPointValue_Parameters.FromString,
                    response_serializer=ControlLoopService__pb2.Subscribe_SetPointValue_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ControlLoopService(object):
    """Feature: Control Loop Service
    Allows to control a Qmix Device with a Control Loop
    """

    @staticmethod
    def WriteSetPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/WriteSetPoint',
            ControlLoopService__pb2.WriteSetPoint_Parameters.SerializeToString,
            ControlLoopService__pb2.WriteSetPoint_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunControlLoop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/RunControlLoop',
            ControlLoopService__pb2.RunControlLoop_Parameters.SerializeToString,
            SiLAFramework__pb2.CommandConfirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunControlLoop_Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/RunControlLoop_Info',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            SiLAFramework__pb2.ExecutionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunControlLoop_Result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/RunControlLoop_Result',
            SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
            ControlLoopService__pb2.RunControlLoop_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopControlLoop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/StopControlLoop',
            ControlLoopService__pb2.StopControlLoop_Parameters.SerializeToString,
            ControlLoopService__pb2.StopControlLoop_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_ControllerValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/Subscribe_ControllerValue',
            ControlLoopService__pb2.Subscribe_ControllerValue_Parameters.SerializeToString,
            ControlLoopService__pb2.Subscribe_ControllerValue_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_SetPointValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.controllers.controlloopservice.v1.ControlLoopService/Subscribe_SetPointValue',
            ControlLoopService__pb2.Subscribe_SetPointValue_Parameters.SerializeToString,
            ControlLoopService__pb2.Subscribe_SetPointValue_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
